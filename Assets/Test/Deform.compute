#pragma kernel Main

#include "HLSLSupport.cginc"
#include "Packages/jp.keijiro.pcx/Runtime/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
RWStructuredBuffer<float4> OutputBuffer;

CBUFFER_START(Params)
    float Param1;
    float Param2;
    float Param3;
CBUFFER_END

static const float kHeight = 1.5;

// Twist
float3 Deform1(float3 p)
{
    float phi = atan2(p.z, p.x) + p.y * Param1;
    float l = length(p.xz);
    return float3(cos(phi) * l, p.y, sin(phi) * l);
}

// Stretch
float3 Deform2(float3 p)
{
    float s = 1 + Param2;
    float e = (s - 1) / 5;
    float d = (p.y / kHeight - 0.5) * 2;
    return p * float2(1 - e * (1 - d * d), s).xyx;
}

// Bend
float3 Deform3(float3 p)
{
    float d = (Param3 < 0 ? -1 : 1) / max(abs(Param3), 1e-4);

    p.x += d;

    float phi = p.y / d;
    p.xy = float2(cos(phi), sin(phi)) * p.x;

    p.x -= d;

    return p;
}

[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    float4 pt = SourceBuffer[id];

    float3 p = pt.xyz;
    half3 c = PcxDecodeColor(asuint(pt.w));

    p = Deform3(Deform2(Deform1(p)));

    OutputBuffer[id] = float4(p, asfloat(PcxEncodeColor(c)));
}
